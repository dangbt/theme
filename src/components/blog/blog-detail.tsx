import Search from './components/search';
import React from 'react';
import Category from './components/category';
import RecentPosts from './components/recent-posts';
import Archives from './components/archives';
import Tags from './components/tags';
import BlogDetailComponent from './components/blog-detail';
import RelatedBlogs from './components/related-blogs';
import { Blog, Categories, MetaTag, Tag, Tags as ITags } from 'interface';
import { getDataFromObject } from 'utils/get-data';
import Head from 'next/head';
import END_POINTS from 'fetcher/endpoint';
import Breadcrumb from 'components/breadcrumb';
import Script from 'next/script';
interface Props {
  tags: ITags;
  categories: Categories;
  blog: Blog;
  metaTag: MetaTag;
}

export default function BlogDetail({ tags, categories, blog, metaTag }: Props) {
  const tagsOfBlog = getDataFromObject(blog, 'attributes.tags');
  return (
    <>
      <Head>
        <title>{metaTag.title}</title>
        <meta property="og:type" content="article" />
        <meta
          property="og:image"
          content={`${END_POINTS.BASE_URL}${metaTag.image}`}
        />
        <meta property="og:site_name" content={metaTag.siteName} />
        <meta
          property="og:url"
          content={`${END_POINTS.BASE_URL}${metaTag.url}`}
        />
        <meta property="og:title" content={metaTag.title} />
        <meta property="og:description" content={metaTag.description} />
        <meta name="article:published_time" content={metaTag.publishedTime} />
        <meta name="article:modified_time" content={metaTag.modifiedTime} />
      </Head>
      <div>
        <div className="relative flex h-[400px] items-center bg-[url(https://samartheme1.vercel.app/images/banner/bnr1.jpg)] bg-cover bg-no-repeat opacity-75 after:absolute after:left-0 after:right-0 after:top-0 after:bottom-0 after:bg-primary after:opacity-75">
          <div className="container relative z-10">
            <div className="text-[48px] text-white">Blog detail</div>
            <Breadcrumb />
          </div>
        </div>
        <div className="container mt-[150px] px-[20px] md:flex md:p-0 md:pb-[30px]">
          <div className="mb-[30px] w-full md:mr-[30px] md:mb-0 md:w-2/3">
            <BlogDetailComponent blog={blog} />
            <div className="my-[20px] border-t border-[#e1e1f0]" />
            <div className="mb-[50px]">
              Tags:{' '}
              {tagsOfBlog.data.length > 0 &&
                tagsOfBlog.data.map(
                  (t: Tag) => `#${getDataFromObject(t, 'attributes.name')} `,
                )}
            </div>
            <RelatedBlogs />
          </div>
          <div className=" w-full md:w-1/3">
            <div className="sticky top-[120px]">
              <div className="mb-[30px]">
                <Search />
              </div>
              <div className="mb-[30px]">
                <Category categories={categories} />
              </div>
              <div className="mb-[30px]">
                <RecentPosts />
              </div>
              <div className="mb-[30px]">
                <Archives />
              </div>
              <div className="mb-[30px]">
                <Tags tags={tags} />
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* <!-- JSON-LD markup generated by Google Structured Data Markup Helper. --> */}
      <Script type="application/ld+json" id="schema-seo">
        {`
          {
            "@context": "http://schema.org",
            "@type": "Article",
            "name": "${metaTag.siteName}",
            "datePublished": "${metaTag.publishedTime}",
            "image": "${END_POINTS.BASE_URL}${metaTag.image}",
            "articleBody": "${metaTag.description}",
            "url": "${metaTag.url}",
            "publisher": {
              "@type": "Organization",
              "name": "${metaTag.publisher}",
            },
            "aggregateRating": {
              "@type":"AggregateRating",
              "ratingValue":${5},
              "reviewCount":${1000},
            },
          }
        `}
      </Script>
    </>
  );
}
